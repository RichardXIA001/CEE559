# Sioux Falls network data: 76 directed links with capacity, free-flow time, etc.
# Format: (init_node, term_node, capacity, free_flow_time_hours, B, power)
links = [
    (1, 2, 25900.20064, 0.06, 0.15, 4),
    (1, 3, 23403.47319, 0.04, 0.15, 4),
    (2, 1, 25900.20064, 0.06, 0.15, 4),
    (2, 6,  4958.180928,0.05, 0.15, 4),
    (3, 1, 23403.47319, 0.04, 0.15, 4),
    (3, 4, 17110.52372, 0.04, 0.15, 4),
    (3, 12,23403.47319, 0.04, 0.15, 4),
    (4, 3, 17110.52372, 0.04, 0.15, 4),
    (4, 5, 17782.7941,  0.02, 0.15, 4),
    (4, 11, 4908.82673, 0.06, 0.15, 4),
    (5, 4, 17782.7941,  0.02, 0.15, 4),
    (5, 6,  4947.995469,0.04, 0.15, 4),
    (5, 9, 10000.0,     0.05, 0.15, 4),
    (6, 2,  4958.180928,0.05, 0.15, 4),
    (6, 5,  4947.995469,0.04, 0.15, 4),
    (6, 8,  4898.587646,0.02, 0.15, 4),
    (7, 8,  7841.81131, 0.03, 0.15, 4),
    (7, 18,23403.47319, 0.02, 0.15, 4),
    (8, 6,  4898.587646,0.02, 0.15, 4),
    (8, 7,  7841.81131, 0.03, 0.15, 4),
    (8, 9,  5050.193156,0.10, 0.15, 4),
    (8, 16, 5045.822583,0.05, 0.15, 4),
    (9, 5,  10000.0,    0.05, 0.15, 4),
    (9, 8,  5050.193156,0.10, 0.15, 4),
    (9, 10,13915.78842, 0.03, 0.15, 4),
    (10,9,  13915.78842, 0.03, 0.15, 4),
    (10,11,10000.0,     0.05, 0.15, 4),
    (10,15,13512.00155, 0.06, 0.15, 4),
    (10,16,4854.917717, 0.04, 0.15, 4),
    (10,17,4993.510694, 0.08, 0.15, 4),
    (11,4, 4908.82673,  0.06, 0.15, 4),
    (11,10,10000.0,     0.05, 0.15, 4),
    (11,12,4908.82673,  0.06, 0.15, 4),
    (11,14,4876.508287, 0.04, 0.15, 4),
    (12,3, 23403.47319, 0.04, 0.15, 4),
    (12,11,4908.82673,  0.06, 0.15, 4),
    (12,13,25900.20064, 0.03, 0.15, 4),
    (13,12,25900.20064, 0.03, 0.15, 4),
    (13,24,5091.256152, 0.04, 0.15, 4),
    (14,11,4876.508287, 0.04, 0.15, 4),
    (14,15,5127.526119, 0.05, 0.15, 4),
    (14,23,4924.790605, 0.04, 0.15, 4),
    (15,10,13512.00155, 0.06, 0.15, 4),
    (15,14,5127.526119, 0.05, 0.15, 4),
    (15,19,14564.75315, 0.03, 0.15, 4),
    (15,22,9599.180565, 0.03, 0.15, 4),
    (16,8, 5045.822583, 0.05, 0.15, 4),
    (16,10,4854.917717, 0.04, 0.15, 4),
    (16,17,5229.910063, 0.02, 0.15, 4),
    (16,18,19679.89671, 0.03, 0.15, 4),
    (17,10,4993.510694, 0.08, 0.15, 4),
    (17,16,5229.910063, 0.02, 0.15, 4),
    (17,19,4823.950831, 0.02, 0.15, 4),
    (18,7, 23403.47319, 0.02, 0.15, 4),
    (18,16,19679.89671, 0.03, 0.15, 4),
    (18,20,23403.47319, 0.04, 0.15, 4),
    (19,15,14564.75315, 0.03, 0.15, 4),
    (19,17,4823.950831, 0.02, 0.15, 4),
    (19,20,5002.607563, 0.04, 0.15, 4),
    (20,18,23403.47319, 0.04, 0.15, 4),
    (20,19,5002.607563, 0.04, 0.15, 4),
    (20,21,5059.91234,  0.06, 0.15, 4),
    (20,22,5075.697193, 0.05, 0.15, 4),
    (21,20,5059.91234,  0.06, 0.15, 4),
    (21,22,5229.910063, 0.02, 0.15, 4),
    (21,24,4885.357564, 0.03, 0.15, 4),
    (22,15,9599.180565, 0.03, 0.15, 4),
    (22,20,5075.697193, 0.05, 0.15, 4),
    (22,21,5229.910063, 0.02, 0.15, 4),
    (22,23,5000.0,      0.04, 0.15, 4),
    (23,14,4924.790605, 0.04, 0.15, 4),
    (23,22,5000.0,      0.04, 0.15, 4),
    (23,24,5078.508436, 0.02, 0.15, 4),
    (24,13,5091.256152, 0.04, 0.15, 4),
    (24,21,4885.357564, 0.03, 0.15, 4),
    (24,23,5078.508436, 0.02, 0.15, 4)
]

# Demand (OD matrix) for 24 zones (flows in vehicles per hour between zones)
# Only nonzero entries shown for brevity; zeros omitted in code.
OD = {
    1: {2:100.0, 3:100.0, 4:500.0, 5:200.0, 6:300.0, 7:500.0, 8:800.0, 9:500.0, 10:1300.0, 11:500.0, 12:200.0, 13:500.0, 14:300.0, 15:500.0, 16:500.0, 17:400.0, 18:100.0, 19:300.0, 20:300.0, 21:100.0, 22:400.0, 23:300.0, 24:100.0},
    2: {1:100.0, 3:100.0, 4:200.0, 5:100.0, 6:400.0, 7:200.0, 8:400.0, 9:200.0, 10:600.0, 11:200.0, 12:100.0, 13:300.0, 14:100.0, 15:100.0, 16:400.0, 17:200.0, 19:100.0, 20:100.0, 22:100.0},
    3: {1:100.0, 2:100.0, 4:200.0, 5:100.0, 6:300.0, 7:100.0, 8:200.0, 9:100.0, 10:300.0, 11:300.0, 12:200.0, 13:100.0, 14:100.0, 15:100.0, 16:200.0, 17:100.0, 22:100.0, 23:100.0},
    4: {1:500.0, 2:200.0, 3:200.0, 5:500.0, 6:400.0, 7:400.0, 8:700.0, 9:700.0, 10:1200.0, 11:1400.0, 12:600.0, 13:600.0, 14:500.0, 15:500.0, 16:800.0, 17:500.0, 18:100.0, 19:200.0, 20:300.0, 21:200.0, 22:400.0, 23:500.0, 24:200.0},
    5: {1:200.0, 2:100.0, 3:100.0, 4:500.0, 6:200.0, 7:200.0, 8:500.0, 9:800.0, 10:1000.0, 11:500.0, 12:200.0, 13:200.0, 14:100.0, 15:200.0, 16:500.0, 17:200.0, 19:100.0, 20:100.0, 21:100.0, 22:200.0, 23:100.0},
    6: {1:300.0, 2:400.0, 3:300.0, 4:400.0, 5:200.0, 7:400.0, 8:800.0, 9:400.0, 10:800.0, 11:400.0, 12:200.0, 13:200.0, 14:100.0, 15:200.0, 16:900.0, 17:500.0, 18:100.0, 19:200.0, 20:300.0, 22:200.0, 23:100.0, 24:100.0},
    7: {1:500.0, 2:200.0, 3:100.0, 4:400.0, 5:200.0, 6:400.0, 8:1000.0, 9:600.0, 10:1900.0, 11:500.0, 12:700.0, 13:400.0, 14:200.0, 15:500.0, 16:1400.0, 17:1000.0, 18:200.0, 19:400.0, 20:500.0, 22:500.0, 23:200.0, 24:100.0},
    8: {1:800.0, 2:400.0, 3:200.0, 4:700.0, 5:500.0, 6:800.0, 7:1000.0, 9:800.0, 10:1600.0, 11:800.0, 12:600.0, 13:600.0, 14:400.0, 15:600.0, 16:2200.0, 17:1400.0, 18:300.0, 19:700.0, 20:900.0, 21:400.0, 22:500.0, 23:300.0, 24:200.0},
    9: {1:500.0, 2:200.0, 3:100.0, 4:700.0, 5:800.0, 6:400.0, 7:600.0, 8:800.0, 10:2800.0, 11:1400.0, 12:600.0, 13:600.0, 14:600.0, 15:900.0, 16:1400.0, 17:900.0, 18:200.0, 19:400.0, 20:600.0, 21:300.0, 22:700.0, 23:500.0, 24:200.0},
    10:{1:1300.0,2:600.0,3:300.0,4:1200.0,5:1000.0,6:800.0,7:1900.0,8:1600.0,9:2800.0,11:4000.0,12:2000.0,13:1900.0,14:2100.0,15:4000.0,16:4400.0,17:3900.0,18:700.0,19:1800.0,20:2500.0,21:1200.0,22:2600.0,23:1800.0,24:800.0},
    11:{1:500.0, 2:200.0, 3:300.0, 4:1500.0,5:500.0, 6:400.0, 7:500.0, 8:800.0, 9:1400.0,10:3900.0,12:1400.0,13:1000.0,14:1600.0,15:1400.0,16:1400.0,17:1000.0,18:100.0,19:400.0,20:600.0,21:400.0,22:1100.0,23:1300.0,24:600.0},
    12:{1:200.0, 2:100.0, 3:200.0, 4:600.0, 5:200.0, 6:200.0, 7:700.0, 8:600.0, 9:600.0, 10:2000.0,11:1400.0,13:1300.0,14:700.0,15:700.0,16:700.0,17:600.0,18:200.0,19:300.0,20:400.0,21:300.0,22:700.0,23:700.0,24:500.0},
    13:{1:500.0, 2:300.0, 3:100.0, 4:600.0, 5:200.0, 6:200.0, 7:400.0, 8:600.0, 9:600.0, 10:1900.0,11:1000.0,12:1300.0,14:600.0,15:700.0,16:600.0,17:500.0,18:100.0,19:300.0,20:600.0,21:600.0,22:1300.0,23:800.0,24:800.0},
    14:{1:300.0, 2:100.0, 3:100.0, 4:500.0, 5:100.0, 6:100.0, 7:200.0, 8:400.0, 9:600.0, 10:2100.0,11:1600.0,12:700.0,13:600.0,15:1300.0,16:700.0,17:700.0,18:100.0,19:300.0,20:500.0,21:400.0,22:1200.0,23:1100.0,24:400.0},
    15:{1:500.0, 2:100.0, 3:100.0, 4:500.0, 5:200.0, 6:200.0, 7:500.0, 8:600.0, 9:1000.0, 10:4000.0,11:1400.0,12:700.0,13:700.0,14:1300.0,16:1200.0,17:1500.0,18:200.0,19:800.0,20:1100.0,21:800.0,22:2600.0,23:1000.0,24:400.0},
    16:{1:500.0, 2:400.0, 3:200.0, 4:800.0, 5:500.0, 6:900.0, 7:1400.0, 8:2200.0, 9:1400.0, 10:4400.0,11:1400.0,12:700.0,13:600.0,14:700.0,15:1200.0,17:2800.0,18:500.0,19:1300.0,20:1600.0,21:600.0,22:1200.0,23:500.0,24:300.0},
    17:{1:400.0, 2:200.0, 3:100.0, 4:500.0, 5:200.0, 6:500.0, 7:1000.0, 8:1400.0, 9:900.0, 10:3900.0,11:1000.0,12:600.0,13:500.0,14:700.0,15:1500.0,16:2800.0,18:600.0,19:1700.0,20:1700.0,21:600.0,22:1700.0,23:600.0,24:300.0},
    18:{1:100.0, 4:100.0, 6:100.0, 7:200.0, 8:300.0, 9:200.0, 10:700.0, 11:200.0, 12:200.0, 13:100.0, 14:100.0, 15:200.0, 16:500.0, 17:600.0, 19:300.0, 20:400.0, 21:100.0, 22:300.0, 23:100.0},
    19:{1:300.0, 2:100.0, 4:200.0, 5:100.0, 6:200.0, 7:400.0, 8:700.0, 9:400.0, 10:1800.0, 11:400.0, 12:300.0, 13:300.0, 14:300.0, 15:800.0, 16:1300.0, 17:1700.0, 18:300.0, 20:1200.0, 21:400.0, 22:1200.0, 23:300.0, 24:100.0},
    20:{1:300.0, 2:100.0, 4:300.0, 5:100.0, 6:300.0, 7:500.0, 8:900.0, 9:600.0, 10:2500.0, 11:600.0, 12:500.0, 13:600.0, 14:500.0, 15:1100.0, 16:1600.0, 17:1700.0, 18:400.0, 19:1200.0, 21:1200.0, 22:2400.0, 23:700.0, 24:400.0},
    21:{1:100.0, 4:200.0, 5:100.0, 6:100.0, 7:200.0, 8:400.0, 9:300.0, 10:1200.0, 11:400.0, 12:300.0, 13:600.0, 14:400.0, 15:800.0, 16:600.0, 17:600.0, 18:100.0, 19:400.0, 20:1200.0, 22:1800.0, 23:700.0, 24:500.0},
    22:{1:400.0, 2:100.0, 3:100.0, 4:400.0, 5:200.0, 6:200.0, 7:500.0, 8:500.0, 9:700.0, 10:2600.0, 11:1100.0, 12:700.0, 13:1300.0, 14:1200.0, 15:2600.0, 16:1200.0, 17:1700.0, 18:300.0, 19:1200.0, 20:2400.0, 21:1800.0, 23:2100.0, 24:1100.0},
    23:{1:300.0, 3:100.0, 4:500.0, 5:100.0, 6:100.0, 7:200.0, 8:300.0, 9:500.0, 10:1800.0, 11:1300.0, 12:700.0, 13:800.0, 14:1100.0, 15:1000.0, 16:500.0, 17:600.0, 18:100.0, 19:300.0, 20:700.0, 21:700.0, 22:2100.0, 24:700.0},
    24:{1:100.0, 4:200.0, 6:100.0, 7:100.0, 8:200.0, 9:200.0, 10:800.0, 11:600.0, 12:500.0, 13:700.0, 14:400.0, 15:400.0, 16:300.0, 17:300.0, 19:100.0, 20:400.0, 21:500.0, 22:1100.0, 23:700.0}
}

import math, heapq

# Build adjacency list for the network
adj = {node: [] for node in range(1, 25)}
for i, (u,v,cap,fft,B,p) in enumerate(links):
    adj[u].append((v, i))

# Travel time function t_i(f) for a link i
def travel_time(i, flow):
    u,v,cap,fft,B,p = links[i]
    return fft * (1 + B * ((flow/cap) ** p))

# Shortest path (Dijkstra) returning distance and predecessor link for given origin
def shortest_path(origin, flows, toll=None):
    dist = {node: math.inf for node in adj}
    dist[origin] = 0.0
    pred = {node: None for node in adj}
    pq = [(0.0, origin)]
    while pq:
        d, u = heapq.heappop(pq)
        if d > dist[u]: 
            continue
        for v, link_idx in adj[u]:
            cost = travel_time(link_idx, flows[link_idx])
            if toll and link_idx in toll:  # include toll in perceived cost
                cost += toll[link_idx]
            newd = d + cost
            if newd < dist[v]:
                dist[v] = newd
                pred[v] = link_idx
                heapq.heappush(pq, (newd, v))
    return dist, pred

# All-or-nothing assignment: assign all OD flow to shortest paths
def all_or_nothing(flows, toll=None):
    new_flows = [0.0] * len(links)
    for origin in OD:
        dist, pred = shortest_path(origin, flows, toll)
        # load each destination's flow on its shortest path
        for dest, demand in OD[origin].items():
            if demand <= 0: 
                continue
            # backtrack from dest to origin using pred links
            node = dest
            while node != origin:
                link_idx = pred[node]
                if link_idx is None: break  # no path
                new_flows[link_idx] += demand
                u = links[link_idx][0]  # move to predecessor node
                node = u
    return new_flows

# Frank-Wolfe UE solver
def user_equilibrium(toll=None, max_iter=100, tol=1e-4):
    # start with all-or-nothing on free-flow times
    flows = all_or_nothing([0.0]*len(links), toll)
    total_demand = sum(sum(d.values()) for d in OD.values())
    for it in range(max_iter):
        new_flows = all_or_nothing(flows, toll)
        # line search for optimal step size alpha
        alpha = 1.0
        low, high = 0.0, 1.0
        for _ in range(30):
            mid = 0.5*(low+high)
            # derivative of objective wrt alpha
            deriv = 0.0
            for i in range(len(flows)):
                if new_flows[i] == flows[i]:
                    continue
                f_mid = flows[i] + mid*(new_flows[i]-flows[i])
                deriv += (new_flows[i]-flows[i]) * travel_time(i, f_mid)
            if abs(deriv) < 1e-6:
                alpha = mid
                break
            if deriv > 0:
                high = mid
            else:
                low = mid
            alpha = mid
        # update flows
        for i in range(len(flows)):
            flows[i] = flows[i] + alpha*(new_flows[i] - flows[i])
        # check convergence (relative gap)
        aux_flows = all_or_nothing(flows, toll)
        diff = sum(abs(aux_flows[i] - flows[i]) for i in range(len(flows)))
        if diff/total_demand < tol:
            break
    return flows

# Solve for UE (no tolls) and system-optimal flows (first-best, by using marginal cost = 5xB)
base_flows = user_equilibrium(toll=None, max_iter=200, tol=1e-4)
# To get system-optimal flows, temporarily modify cost function B -> 5*B (marginal cost)
orig_links = links.copy()
links = [(u,v,cap,fft, B*5.0, p) for (u,v,cap,fft,B,p) in links]  # inflate B
opt_flows = user_equilibrium(toll=None, max_iter=200, tol=1e-4)
links = orig_links  # restore original B

# Compute first-best toll for each link = marginal cost travel time – actual travel time
first_best_toll = [0.0]*len(links)
for i in range(len(links)):
    # t_actual with original B, t_marg with B*5
    t_act = travel_time(i, opt_flows[i])
    # temporarily compute marginal time using B*5
    u,v,cap,fft,B,p = links[i]
    t_marg = fft * (1 + B*5.0 * ((opt_flows[i]/cap) ** p))
    first_best_toll[i] = t_marg - t_act

# Select top 5 links by first-best toll
tolled_indices = sorted(range(len(links)), key=lambda i: first_best_toll[i], reverse=True)[:5]
tolled_links = [(links[i][0], links[i][1]) for i in tolled_indices]
toll_values = {i: min(first_best_toll[i], 0.05) for i in tolled_indices}  # cap at 0.05h (3 min)

print("Five links tolled (From->To) and toll (hours):")
for i in tolled_indices:
    print(f"  {links[i][0]}->{links[i][1]}: {toll_values[i]:.2f} h")

# Compute new UE with these tolls
toll_flows = user_equilibrium(toll=toll_values, max_iter=200, tol=1e-4)

# Calculate total system travel times
def total_travel_time(flows):
    return sum(flows[i]*travel_time(i, flows[i]) for i in range(len(flows)))

TSTT_base = total_travel_time(base_flows)
TSTT_toll = total_travel_time(toll_flows)
TSTT_opt  = total_travel_time(opt_flows)
print(f"\nTSTT before tolls: {TSTT_base:.2f} hours")
print(f"TSTT after tolls:  {TSTT_toll:.2f} hours")
print(f"TSTT system optimum (for reference): {TSTT_opt:.2f} hours")

# Print flow results with tolls for verification
print("\nUE flows with tolls (vehicles/hour):")
for i,(u,v,cap,fft,B,p) in enumerate(links):
    print(f" {u}->{v}: {toll_flows[i]:.1f}")
